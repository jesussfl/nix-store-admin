import { ResultOf } from "@graphql-typed-document-node/core";
import { ChangeDetectionStrategy, Component, OnInit, OnDestroy } from "@angular/core";
import { FormBuilder } from "@angular/forms";
import { TypedBaseDetailComponent, LanguageCode, NotificationService, SharedModule } from "@vendure/admin-ui/core";

// This is the TypedDocumentNode & type generated by GraphQL Code Generator
import { graphql } from "../../gql";

export const loteDetailFragment = graphql(`
  fragment LoteDetail on Lote {
    id
    createdAt
    updatedAt
    name
    description
  }
`);

export const getLoteDetailDocument = graphql(`
  query GetLote($id: ID!) {
    getLote(loteId: $id) {
      ...LoteDetail
    }
  }
`);

export const createLoteDocument = graphql(`
  mutation CreateLote($input: CreateLoteInput!) {
    createLote(input: $input) {
      ...LoteDetail
    }
  }
`);

export const updateLoteDocument = graphql(`
  mutation UpdateLote($id: ID!, $input: UpdateLoteInput!) {
    updateLote(loteId: $id, input: $input) {
      ...LoteDetail
    }
  }
`);

export const deleteLoteDocument = graphql(`
  mutation DeleteLote($id: ID!) {
    deleteLote(loteId: $id)
  }
`);

@Component({
  selector: "lotes-detail",
  templateUrl: "./lotes-detail-view.component.html",
  //   styleUrls: ["./lotes-detail-view.component.scss"],
  changeDetection: ChangeDetectionStrategy.OnPush,
  standalone: true,
  imports: [SharedModule],
})
export class LoteDetailComponent extends TypedBaseDetailComponent<typeof getLoteDetailDocument, "getLote"> implements OnInit, OnDestroy {
  detailForm: ReturnType<FormBuilder["group"]>;

  constructor(private formBuilder: FormBuilder, private notificationService: NotificationService) {
    super();
    this.detailForm = this.formBuilder.group({
      name: [""],
      description: [""],
    });
  }

  ngOnInit() {
    this.init();
  }

  ngOnDestroy() {
    this.destroy();
  }

  create() {
    const { name, description } = this.detailForm.value;
    if (!name || !description) {
      return;
    }
    this.dataService
      .mutate(createLoteDocument, {
        input: { name, description },
      })
      .subscribe({
        next: () => {
          this.notificationService.success("Lote created successfully");
          this.router.navigate(["/extensions", "lotes"]);
        },
      });
  }

  update() {
    const { name, description } = this.detailForm.value;
    this.dataService
      .mutate(updateLoteDocument, {
        id: this.id,
        input: { name: name || "", description },
      })
      .subscribe({
        next: () => {
          this.notificationService.success("Lote updated successfully");
        },
      });
  }

  delete() {
    this.dataService
      .mutate(deleteLoteDocument, {
        id: this.id,
      })
      .subscribe({
        next: () => {
          this.notificationService.success("Lote deleted successfully");
          this.router.navigate(["/extensions", "lotes"]);
        },
      });
  }

  protected setFormValues(entity: NonNullable<ResultOf<typeof getLoteDetailDocument>["getLote"]>, languageCode: LanguageCode): void {
    this.detailForm.patchValue({
      name: entity.name,
      description: entity.description,
    });
  }
}
