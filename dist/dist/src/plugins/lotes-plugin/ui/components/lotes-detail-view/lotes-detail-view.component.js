"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoteDetailComponent = exports.deleteLoteDocument = exports.updateLoteDocument = exports.createLoteDocument = exports.getLoteDetailDocument = exports.loteDetailFragment = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const core_2 = require("@vendure/admin-ui/core");
// This is the TypedDocumentNode & type generated by GraphQL Code Generator
const gql_1 = require("../../gql");
exports.loteDetailFragment = (0, gql_1.graphql)(`
  fragment LoteDetail on Lote {
    id
    createdAt
    updatedAt
    name
    description
  }
`);
exports.getLoteDetailDocument = (0, gql_1.graphql)(`
  query GetLote($id: ID!) {
    getLote(loteId: $id) {
      ...LoteDetail
    }
  }
`);
exports.createLoteDocument = (0, gql_1.graphql)(`
  mutation CreateLote($input: CreateLoteInput!) {
    createLote(input: $input) {
      ...LoteDetail
    }
  }
`);
exports.updateLoteDocument = (0, gql_1.graphql)(`
  mutation UpdateLote($id: ID!, $input: UpdateLoteInput!) {
    updateLote(loteId: $id, input: $input) {
      ...LoteDetail
    }
  }
`);
exports.deleteLoteDocument = (0, gql_1.graphql)(`
  mutation DeleteLote($id: ID!) {
    deleteLote(loteId: $id)
  }
`);
let LoteDetailComponent = class LoteDetailComponent extends core_2.TypedBaseDetailComponent {
    constructor(formBuilder, notificationService) {
        super();
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.detailForm = this.formBuilder.group({
            name: [""],
            description: [""],
        });
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    create() {
        const { name, description } = this.detailForm.value;
        if (!name || !description) {
            return;
        }
        this.dataService
            .mutate(exports.createLoteDocument, {
            input: { name, description },
        })
            .subscribe({
            next: () => {
                this.notificationService.success("Lote created successfully");
                this.router.navigate(["/extensions", "lotes"]);
            },
        });
    }
    update() {
        const { name, description } = this.detailForm.value;
        this.dataService
            .mutate(exports.updateLoteDocument, {
            id: this.id,
            input: { name: name || "", description },
        })
            .subscribe({
            next: () => {
                this.notificationService.success("Lote updated successfully");
            },
        });
    }
    delete() {
        this.dataService
            .mutate(exports.deleteLoteDocument, {
            id: this.id,
        })
            .subscribe({
            next: () => {
                this.notificationService.success("Lote deleted successfully");
                this.router.navigate(["/extensions", "lotes"]);
            },
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
            description: entity.description,
        });
    }
};
exports.LoteDetailComponent = LoteDetailComponent;
exports.LoteDetailComponent = LoteDetailComponent = __decorate([
    (0, core_1.Component)({
        selector: "lotes-detail",
        templateUrl: "./lotes-detail-view.component.html",
        //   styleUrls: ["./lotes-detail-view.component.scss"],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [core_2.SharedModule],
    }),
    __metadata("design:paramtypes", [forms_1.FormBuilder, core_2.NotificationService])
], LoteDetailComponent);
