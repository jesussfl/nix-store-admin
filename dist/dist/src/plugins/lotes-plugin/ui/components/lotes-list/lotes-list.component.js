"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoteListComponent = void 0;
const core_1 = require("@angular/core");
const core_2 = require("@vendure/admin-ui/core");
const gql_1 = require("../../gql");
// This is the TypedDocumentNode generated by GraphQL Code Generator
const getLoteListDocument = (0, gql_1.graphql)(`
  query AllLotes($options: LoteListOptions) {
    allLotes(options: $options) {
      items {
        id
        createdAt
        updatedAt
        name
        description
      }
      totalItems
    }
  }
`);
let LoteListComponent = class LoteListComponent extends core_2.TypedBaseListComponent {
    constructor() {
        super();
        // Here we set up the filters that will be available
        // to use in the data table
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: "name",
            type: { kind: "text" },
            label: "Name",
            filterField: "name",
        })
            .addFilter({
            name: "description",
            type: { kind: "text" },
            label: "Description",
            filterField: "description",
        })
            // .addFilter({
            //   name: "rating",
            //   type: { kind: "number" },
            //   label: "Rating",
            //   filterField: "rating",
            // })
            // .addFilter({
            //   name: "authorName",
            //   type: { kind: "text" },
            //   label: "Author",
            //   filterField: "authorName",
            // })
            .connectToRoute(this.route);
        // Here we set up the sorting options that will be available
        // to use in the data table
        this.sorts = this.createSortCollection()
            .defaultSort("createdAt", "DESC")
            .addSort({ name: "createdAt" })
            .addSort({ name: "updatedAt" })
            .addSort({ name: "name" })
            .addSort({ name: "description" })
            // .addSort({ name: "rating" })
            // .addSort({ name: "authorName" })
            .connectToRoute(this.route);
        super.configure({
            document: getLoteListDocument,
            getItems: (data) => {
                // Log the data items here
                console.log("Retrieved data:", data.allLotes);
                return data.allLotes;
            },
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
};
exports.LoteListComponent = LoteListComponent;
exports.LoteListComponent = LoteListComponent = __decorate([
    (0, core_1.Component)({
        selector: "lotes-list",
        templateUrl: "./lotes-list.component.html",
        styleUrls: ["./lotes-list.component.scss"],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [core_2.SharedModule],
    }),
    __metadata("design:paramtypes", [])
], LoteListComponent);
